{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\echa328\\\\Downloads\\\\Unleashed-Frontend-Repo\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Chatbot.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function getUserId(username) {\n  if (!username) return null; // Skip if no username\n\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/users/get-user-id?username=${encodeURIComponent(username)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem('user_id', data.UserId); // Cache userId locally\n      return data.UserId;\n    } else {\n      console.error('Error fetching user ID:', response.status);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error retrieving user ID:', error);\n    return null;\n  }\n}\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [reportType, setReportType] = useState('');\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    content: ''\n  });\n  const [userId, setUserId] = useState(null);\n  const chatEndRef = useRef(null);\n  const [convoId, setConvoId] = useState(null);\n  const [isGuest, setIsGuest] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessions, setSessions] = useState([]);\n  const [isTitleUpdated, setIsTitleUpdated] = useState(false); // Track if title is updated\n  const [convoTitle, setConvoTitle] = useState(\"\"); // State to track ConvoTitle\n  const [selectedEndpoint, setSelectedEndpoint] = useState('Default Model'); // State for selected endpoint\n\n  // Map endpoint options\n  const endpointOptions = {\n    'Default Model': `${API_BASE_URL}/api/bedrock/chat`,\n    'Advanced Model': `${API_BASE_URL}/api/bedrock/invoke-flow`\n  };\n\n  // Dynamically update BACKEND_API_URL_FLOW based on selection\n  const BACKEND_API_URL_FLOW = endpointOptions[selectedEndpoint] || endpointOptions['Default Model'];\n  const BACKEND_API_URL = `${API_BASE_URL}/api/bedrock/chat`;\n  const REPORT_API_URL = `${API_BASE_URL}/api/report`;\n  const API_BASE_URL_2 = `${API_BASE_URL}/api/conversation-history`;\n  useEffect(() => {\n    console.log('Sessions:', sessions);\n  }, [sessions]);\n  useEffect(() => {\n    console.log('Messages retrieved for page/session:', messages);\n  }, [messages]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      var _chatEndRef$current;\n      (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // On component mount, determine if user is logged in\n  useEffect(() => {\n    const fetchUser = async () => {\n      const storedUserId = localStorage.getItem(\"user_id\");\n      const username = localStorage.getItem(\"username\");\n      if (storedUserId) {\n        setUserId(storedUserId);\n        setIsGuest(false);\n      } else if (username) {\n        const fetchedUserId = await getUserId(username);\n        if (fetchedUserId) {\n          setUserId(fetchedUserId);\n          setIsGuest(false);\n        } else {\n          console.error(\"Failed to fetch userId for the logged-in user.\");\n        }\n      } else {\n        setIsGuest(true);\n      }\n    };\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    // This effect will run when the component mounts and when userId is available\n    if (userId) {\n      fetchSessions(); // Fetch sessions when the component is first loaded\n    }\n  }, [userId]); // This will trigger only when userId changes\n\n  // Fetch all sessions for the logged-in user\n  // Fetch sessions and their titles\n  // Fetch sessions and their titles\n  const fetchSessions = async () => {\n    if (!userId || isGuest) return;\n    try {\n      const response = await fetch(`${API_BASE_URL_2}/sessions/${userId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"Fetched sessions:\", data); // Add logging to debug the response\n        setSessions(data); // Update the sessions state with the latest data\n      } else {\n        console.error(\"Failed to fetch sessions:\", response.status);\n      }\n    } catch (error) {\n      console.error(\"Error fetching sessions:\", error);\n    }\n  };\n\n  // Fetch messages for a specific session\n  const fetchMessages = async sessionId => {\n    if (!sessionId) {\n      console.error(\"Session ID is undefined.\");\n      return [];\n    }\n    try {\n      const response = await fetch(`${API_BASE_URL}/messages/${sessionId}/${userId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (!Array.isArray(data) || data.length === 0) {\n          console.error(\"Invalid data structure or empty response:\", data);\n          return [];\n        }\n\n        // Map UserInput and BotResponse\n        return data.flatMap(message => [{\n          user: true,\n          text: message.userInput || \"No user input provided\"\n        }, {\n          user: false,\n          text: message.botResponse || \"No response from bot\"\n        }]);\n      } else {\n        console.error(\"Failed to fetch messages:\", response.status);\n        return [];\n      }\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      return [];\n    }\n  };\n  const handleSelectSession = async sessionId => {\n    console.log(\"Selected Session ID:\", sessionId);\n    console.log(\"User ID:\", userId);\n    if (!sessionId || !userId) {\n      console.error(\"Session ID or User ID is missing.\");\n      return;\n    }\n    try {\n      setConvoId(sessionId);\n      const retrievedMessages = await fetchMessages(sessionId);\n      console.log(\"Retrieved Messages:\", retrievedMessages);\n      setMessages(retrievedMessages);\n    } catch (error) {\n      console.error(\"Error selecting session:\", error);\n    }\n  };\n\n  // Handle manual creation of new conversation\n  const handleNewConversation = async () => {\n    if (isGuest) {\n      console.warn(\"Guests cannot create new conversations.\");\n      return;\n    }\n\n    // Reset the current session and messages\n    setConvoId(null); // Clear current session ID\n    setMessages([]); // Clear the messages\n\n    console.log(\"Session cleared. Waiting for first user input to auto-create session.\");\n  };\n\n  // Update\n  const updateSessionTitle = async (convoId, convoTitle) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/update-title`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          ConvoID: convoId,\n          ConvoTitle: convoTitle\n        })\n      });\n      if (response.ok) {\n        console.log(`Session title updated to: ${convoTitle}`);\n\n        // After updating the title, directly re-fetch the sessions to get the latest data\n        fetchSessions(); // Re-fetch sessions to reflect the updated title\n      } else {\n        console.error(\"Failed to update session title.\");\n      }\n    } catch (error) {\n      console.error(\"Error updating session title:\", error);\n    }\n  };\n  const createNewSession = async (userId, setSessions, setConvoId, convoTitle = \"New Conversation\") => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          UserID: userId,\n          ConvoTitle: convoTitle\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n\n        // Check if the session is already in the list before adding\n        setSessions(prevSessions => {\n          const exists = prevSessions.some(session => session.convoID === result.convoID);\n          if (exists) return prevSessions; // Do not add duplicates\n          return [...prevSessions, {\n            convoID: result.convoID,\n            convoTitle\n          }];\n        });\n        setConvoId(result.convoID);\n        console.log(`New session created with convoID: ${result.convoID} and title: ${convoTitle}`);\n        return result.convoID; // Return the convoID for further use\n      } else {\n        console.error(\"Failed to create a session.\");\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error creating session:\", error);\n      return null;\n    }\n  };\n  const extractKeyWords = message => {\n    if (!message) return \"New Conversation\";\n    const words = message.split(\" \").slice(0, 3).join(\" \");\n    return words || \"New Conversation\";\n  };\n  const generateMessageID = () => {\n    return 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\n      return (Math.random() * 16 | 0).toString(16);\n    });\n  };\n  const handleSend = async () => {\n    if (userInput.trim()) {\n      // Handle Guest User\n      if (isGuest) {\n        setUserInput('');\n        setMessages(prev => [...prev, {\n          user: true,\n          text: userInput\n        }]); // Add user's input immediately\n        setIsLoading(true);\n        try {\n          const response = await fetch(BACKEND_API_URL_FLOW, {\n            // change here to switch agent and flow\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              message: userInput\n            })\n          });\n          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n          const result = await response.json();\n          const botMessage = {\n            user: false,\n            text: processBotResponse(result.reply)\n          };\n          setMessages(prev => [...prev, botMessage]); // Add bot response to messages\n        } catch (error) {\n          console.error('Error:', error.message);\n          setMessages(prev => [...prev, {\n            user: true,\n            text: userInput\n          }, {\n            user: false,\n            text: 'Error: Unable to connect to bot.'\n          }]);\n        } finally {\n          setIsLoading(false);\n        }\n        return;\n      }\n      setUserInput('');\n      setMessages(prev => [...prev, {\n        user: true,\n        text: userInput\n      }]); // Add user's input immediately\n      setIsLoading(true);\n      try {\n        let localConvoId = convoId;\n\n        // If there's no convoId, create a new session\n        if (!localConvoId) {\n          const convoTitle = extractKeyWords(userInput); // Generate title from user input\n          localConvoId = await createNewSession(userId, setSessions, setConvoId, convoTitle);\n          if (!localConvoId) {\n            console.error('Failed to create a new session.');\n            return;\n          }\n        }\n\n        // Generate MessageID\n        const messageID = generateMessageID();\n\n        // Save the user input and fetch bot response\n        const botResponse = await fetch(BACKEND_API_URL_FLOW, {\n          // change here to switch agent and flow\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            message: userInput,\n            userId\n          })\n        });\n        if (!botResponse.ok) throw new Error(`HTTP error! status: ${botResponse.status}`);\n        const botResult = await botResponse.json();\n\n        // Save the input and bot response to the backend\n        const saveMessageResponse = await fetch(`${API_BASE_URL}/save-message`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            ConvoID: localConvoId,\n            UserID: userId,\n            UserInput: userInput,\n            BotResponse: botResult.reply,\n            BotTraceInfo: '{}',\n            // Default trace info\n            ConvoTitle: convoTitle,\n            MessageID: messageID\n          })\n        });\n        if (!saveMessageResponse.ok) throw new Error('Failed to save message to the backend.');\n\n        // Fetch updated messages for the session to reflect changes\n        const updatedMessages = await fetchMessages(localConvoId);\n\n        // Update frontend messages state\n        setMessages(updatedMessages.map(msg => ({\n          ...msg,\n          text: processBotResponse(msg.text)\n        })));\n\n        // Ensure title is updated only once, if required\n        if (convoTitle === 'New Conversation') {\n          const response = await fetch(`${API_BASE_URL}/get-session-title/${localConvoId}`);\n          if (!response.ok) throw new Error(`Failed to fetch session title.`);\n          const data = await response.json();\n          let updatedTitle = data.ConvoTitle;\n          if (!updatedTitle || updatedTitle === 'New Conversation') {\n            updatedTitle = extractKeyWords(userInput);\n            await updateSessionTitle(localConvoId, updatedTitle);\n          }\n        }\n      } catch (error) {\n        console.error('Error:', error.message);\n        setMessages(prev => [...prev, {\n          user: true,\n          text: userInput\n        }, {\n          user: false,\n          text: 'Error: Unable to connect to bot.'\n        }]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  const processBotResponse = text => {\n    if (!text) return text;\n\n    // Replace `**` wrapped text with HTML <b> tags\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<b>$1</b>');\n  };\n  const handleSendReport = async () => {\n    try {\n      const nzTime = new Date().toLocaleString('en-NZ', {\n        timeZone: 'Pacific/Auckland'\n      });\n      const reportData = {\n        ...formData,\n        type: reportType,\n        reportedAt: nzTime\n      };\n      const response = await fetch(REPORT_API_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(reportData)\n      });\n      if (!response.ok) throw new Error('Failed to submit report');\n      alert('Report submitted successfully!');\n      setIsModalOpen(false);\n      setFormData({\n        username: '',\n        email: '',\n        content: ''\n      });\n    } catch (error) {\n      console.error('Error submitting report:', error.message);\n      alert('Error submitting the report');\n    }\n  };\n  const handleOpenModal = type => {\n    setReportType(type);\n    setIsModalOpen(true);\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `sidebar ${isGuest ? '' : ''}`,\n      children: !isGuest ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNewConversation,\n          disabled: isGuest,\n          children: \"New Conversation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: sessions.length > 0 ?\n          // Remove duplicate sessions by convoID\n          [...new Map(sessions.map(session => [session.convoID, session])).values()].map(session => /*#__PURE__*/_jsxDEV(\"li\", {\n            // Use convoID as a unique key\n            className: session.convoID === convoId ? 'active' : '',\n            onClick: () => handleSelectSession(session.convoID),\n            children: session.convoTitle || 'New Conversation'\n          }, session.convoID, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Type to create new conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sidebar-footer\",\n          children: \"\\xA9 2025 My Chatbot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guest-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Please log in or sign up to save your messages.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => window.location.href = '/login',\n          className: \"login-button\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"model-selector\",\n            className: \"dropdown-label\",\n            children: \"Select Model:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"model-selector\",\n            value: selectedEndpoint,\n            onChange: e => setSelectedEndpoint(e.target.value),\n            className: \"dropdown\",\n            children: Object.keys(endpointOptions).map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"report-button\",\n          onClick: () => handleOpenModal('Chatbot Issue'),\n          children: \"\\uD83C\\uDFF3\\uFE0F Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-box\",\n        children: [messages.length > 0 ? messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-row ${msg.user ? 'user-message' : 'bot-message'}`,\n          children: [!msg.user && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\",\n              alt: \"Bot\",\n              className: \"bot-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-bubble\",\n              dangerouslySetInnerHTML: {\n                __html: msg.text\n              } // Render HTML for bold text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true), msg.user && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-bubble\",\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"https://img.icons8.com/ios-filled/50/0078d4/user-male-circle.png\",\n              alt: \"User\",\n              className: \"user-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 15\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-row bot-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\",\n            alt: \"Bot\",\n            className: \"bot-logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-bubble\",\n            children: \"Bot is typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyDown: e => e.key === 'Enter' && handleSend() // Trigger send on Enter key press\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 9\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [reportType, \" Report\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          value: formData.username,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          value: formData.email,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"content\",\n          rows: \"4\",\n          value: formData.content,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            marginTop: '10px',\n            fontSize: '0.9rem',\n            color: '#0078d4',\n            cursor: 'pointer'\n          },\n          children: reportType === 'Chatbot Issue' ? /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              setReportType('Website Issue');\n              setFormData({\n                username: '',\n                email: '',\n                content: ''\n              }); // Reset form\n            },\n            children: \"Is there a website problem? Report it here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => {\n              setReportType('Chatbot Issue');\n              setFormData({\n                username: '',\n                email: '',\n                content: ''\n              }); // Reset form\n            },\n            children: \"Go back to Chatbot Issue form\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-submit\",\n          onClick: handleSendReport,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal-close\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n}\n_s(Chatbot, \"HqF26KlSNU3r8UOzRxwCfzNYJyA=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","getUserId","username","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","response","fetch","encodeURIComponent","method","headers","ok","data","json","localStorage","setItem","UserId","console","error","status","Chatbot","_s","messages","setMessages","userInput","setUserInput","isModalOpen","setIsModalOpen","reportType","setReportType","formData","setFormData","email","content","userId","setUserId","chatEndRef","convoId","setConvoId","isGuest","setIsGuest","isLoading","setIsLoading","sessions","setSessions","isTitleUpdated","setIsTitleUpdated","convoTitle","setConvoTitle","selectedEndpoint","setSelectedEndpoint","endpointOptions","BACKEND_API_URL_FLOW","BACKEND_API_URL","REPORT_API_URL","API_BASE_URL_2","log","length","_chatEndRef$current","current","scrollIntoView","behavior","fetchUser","storedUserId","getItem","fetchedUserId","fetchSessions","fetchMessages","sessionId","Array","isArray","flatMap","message","user","text","botResponse","handleSelectSession","retrievedMessages","handleNewConversation","warn","updateSessionTitle","body","JSON","stringify","ConvoID","ConvoTitle","createNewSession","UserID","result","prevSessions","exists","some","session","convoID","extractKeyWords","words","split","slice","join","generateMessageID","replace","Math","random","toString","handleSend","trim","prev","Error","botMessage","processBotResponse","reply","localConvoId","messageID","botResult","saveMessageResponse","UserInput","BotResponse","BotTraceInfo","MessageID","updatedMessages","map","msg","updatedTitle","handleSendReport","nzTime","Date","toLocaleString","timeZone","reportData","type","reportedAt","alert","handleOpenModal","handleInputChange","e","name","value","target","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Map","values","window","location","href","htmlFor","id","onChange","Object","keys","option","index","src","alt","dangerouslySetInnerHTML","__html","ref","placeholder","onKeyDown","key","rows","style","marginTop","fontSize","color","cursor","_c","$RefreshReg$"],"sources":["C:/Users/echa328/Downloads/Unleashed-Frontend-Repo/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\n\r\nasync function getUserId(username) {\r\n  if (!username) return null; // Skip if no username\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/users/get-user-id?username=${encodeURIComponent(username)}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      localStorage.setItem('user_id', data.UserId); // Cache userId locally\r\n      return data.UserId;\r\n    } else {\r\n      console.error('Error fetching user ID:', response.status);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving user ID:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [reportType, setReportType] = useState('');\r\n  const [formData, setFormData] = useState({ username: '', email: '', content: '' });\r\n  const [userId, setUserId] = useState(null);\r\n  const chatEndRef = useRef(null);\r\n  const [convoId, setConvoId] = useState(null);\r\n  const [isGuest, setIsGuest] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [isTitleUpdated, setIsTitleUpdated] = useState(false); // Track if title is updated\r\n  const [convoTitle, setConvoTitle] = useState(\"\"); // State to track ConvoTitle\r\n  const [selectedEndpoint, setSelectedEndpoint] = useState('Default Model'); // State for selected endpoint\r\n\r\n\r\n  // Map endpoint options\r\n  const endpointOptions = {\r\n    'Default Model': `${API_BASE_URL}/api/bedrock/chat`,\r\n    'Advanced Model': `${API_BASE_URL}/api/bedrock/invoke-flow`,\r\n  };\r\n\r\n  // Dynamically update BACKEND_API_URL_FLOW based on selection\r\n  const BACKEND_API_URL_FLOW = endpointOptions[selectedEndpoint] || endpointOptions['Default Model'];\r\n\r\n  const BACKEND_API_URL = `${API_BASE_URL}/api/bedrock/chat`;\r\n  const REPORT_API_URL = `${API_BASE_URL}/api/report`;\r\n  const API_BASE_URL_2 = `${API_BASE_URL}/api/conversation-history`;\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('Sessions:', sessions);\r\n  }, [sessions]);\r\n  \r\n  useEffect(() => {\r\n    console.log('Messages retrieved for page/session:', messages);\r\n  }, [messages]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (messages.length > 0) {\r\n      chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // On component mount, determine if user is logged in\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      const storedUserId = localStorage.getItem(\"user_id\");\r\n      const username = localStorage.getItem(\"username\");\r\n\r\n      if (storedUserId) {\r\n        setUserId(storedUserId);\r\n        setIsGuest(false);\r\n      } else if (username) {\r\n        const fetchedUserId = await getUserId(username);\r\n        if (fetchedUserId) {\r\n          setUserId(fetchedUserId);\r\n          setIsGuest(false);\r\n        } else {\r\n          console.error(\"Failed to fetch userId for the logged-in user.\");\r\n        }\r\n      } else {\r\n        setIsGuest(true);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // This effect will run when the component mounts and when userId is available\r\n    if (userId) {\r\n      fetchSessions(); // Fetch sessions when the component is first loaded\r\n    }\r\n  }, [userId]);  // This will trigger only when userId changes\r\n  \r\n  \r\n\r\n  // Fetch all sessions for the logged-in user\r\n  // Fetch sessions and their titles\r\n  // Fetch sessions and their titles\r\nconst fetchSessions = async () => {\r\n  if (!userId || isGuest) return;\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL_2}/sessions/${userId}`, {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log(\"Fetched sessions:\", data);  // Add logging to debug the response\r\n      setSessions(data); // Update the sessions state with the latest data\r\n    } else {\r\n      console.error(\"Failed to fetch sessions:\", response.status);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching sessions:\", error);\r\n  }\r\n};\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n  \r\n  \r\n\r\n  // Fetch messages for a specific session\r\n  const fetchMessages = async (sessionId) => {\r\n    if (!sessionId) {\r\n      console.error(\"Session ID is undefined.\");\r\n      return [];\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/messages/${sessionId}/${userId}`, {\r\n        method: \"GET\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n  \r\n        if (!Array.isArray(data) || data.length === 0) {\r\n          console.error(\"Invalid data structure or empty response:\", data);\r\n          return [];\r\n        }\r\n  \r\n        // Map UserInput and BotResponse\r\n        return data.flatMap((message) => [\r\n          { user: true, text: message.userInput || \"No user input provided\" },\r\n          { user: false, text: message.botResponse || \"No response from bot\" },\r\n        ]);\r\n      } else {\r\n        console.error(\"Failed to fetch messages:\", response.status);\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  const handleSelectSession = async (sessionId) => {\r\n    console.log(\"Selected Session ID:\", sessionId);\r\n    console.log(\"User ID:\", userId);\r\n  \r\n    if (!sessionId || !userId) {\r\n      console.error(\"Session ID or User ID is missing.\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      setConvoId(sessionId);\r\n      const retrievedMessages = await fetchMessages(sessionId);\r\n      console.log(\"Retrieved Messages:\", retrievedMessages);\r\n  \r\n      setMessages(retrievedMessages);\r\n    } catch (error) {\r\n      console.error(\"Error selecting session:\", error);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  // Handle manual creation of new conversation\r\n  const handleNewConversation = async () => {\r\n    if (isGuest) {\r\n      console.warn(\"Guests cannot create new conversations.\");\r\n      return;\r\n    }\r\n  \r\n    // Reset the current session and messages\r\n    setConvoId(null); // Clear current session ID\r\n    setMessages([]);  // Clear the messages\r\n  \r\n    console.log(\"Session cleared. Waiting for first user input to auto-create session.\");\r\n  };\r\n\r\n\r\n  // Update\r\n  const updateSessionTitle = async (convoId, convoTitle) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/update-title`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ ConvoID: convoId, ConvoTitle: convoTitle }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        console.log(`Session title updated to: ${convoTitle}`);\r\n  \r\n        // After updating the title, directly re-fetch the sessions to get the latest data\r\n        fetchSessions(); // Re-fetch sessions to reflect the updated title\r\n      } else {\r\n        console.error(\"Failed to update session title.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating session title:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n\r\n  const createNewSession = async (userId, setSessions, setConvoId, convoTitle = \"New Conversation\") => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/create`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ UserID: userId, ConvoTitle: convoTitle }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n  \r\n        // Check if the session is already in the list before adding\r\n        setSessions((prevSessions) => {\r\n          const exists = prevSessions.some((session) => session.convoID === result.convoID);\r\n          if (exists) return prevSessions; // Do not add duplicates\r\n          return [...prevSessions, { convoID: result.convoID, convoTitle }];\r\n        });\r\n  \r\n        setConvoId(result.convoID);\r\n        console.log(`New session created with convoID: ${result.convoID} and title: ${convoTitle}`);\r\n        return result.convoID; // Return the convoID for further use\r\n      } else {\r\n        console.error(\"Failed to create a session.\");\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating session:\", error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n\r\n  \r\n  const extractKeyWords = (message) => {\r\n    if (!message) return \"New Conversation\";\r\n    const words = message.split(\" \").slice(0, 3).join(\" \");\r\n    return words || \"New Conversation\";\r\n  };\r\n\r\n  const generateMessageID = () => {\r\n    return 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n      return (Math.random() * 16 | 0).toString(16);\r\n    });\r\n  };\r\n  \r\n\r\n\r\n  const handleSend = async () => {\r\n    if (userInput.trim()) {\r\n      // Handle Guest User\r\n      if (isGuest) {\r\n        setUserInput('');\r\n        setMessages((prev) => [...prev, { user: true, text: userInput }]); // Add user's input immediately\r\n        setIsLoading(true);\r\n  \r\n        try {\r\n          const response = await fetch(BACKEND_API_URL_FLOW, {   // change here to switch agent and flow\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ message: userInput }),\r\n          });\r\n  \r\n          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n  \r\n          const result = await response.json();\r\n          const botMessage = { user: false, text: processBotResponse(result.reply) };\r\n          setMessages((prev) => [...prev, botMessage]); // Add bot response to messages\r\n        } catch (error) {\r\n          console.error('Error:', error.message);\r\n          setMessages((prev) => [...prev, { user: true, text: userInput }, { user: false, text: 'Error: Unable to connect to bot.' }]);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n        return;\r\n      }\r\n  \r\n      setUserInput('');\r\n      setMessages((prev) => [...prev, { user: true, text: userInput }]); // Add user's input immediately\r\n      setIsLoading(true);\r\n  \r\n      try {\r\n        let localConvoId = convoId;\r\n  \r\n        // If there's no convoId, create a new session\r\n        if (!localConvoId) {\r\n          const convoTitle = extractKeyWords(userInput); // Generate title from user input\r\n          localConvoId = await createNewSession(userId, setSessions, setConvoId, convoTitle);\r\n  \r\n          if (!localConvoId) {\r\n            console.error('Failed to create a new session.');\r\n            return;\r\n          }\r\n        }\r\n  \r\n        // Generate MessageID\r\n        const messageID = generateMessageID();\r\n  \r\n        // Save the user input and fetch bot response\r\n        const botResponse = await fetch(BACKEND_API_URL_FLOW, {  // change here to switch agent and flow\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ message: userInput, userId }),\r\n        });\r\n  \r\n        if (!botResponse.ok) throw new Error(`HTTP error! status: ${botResponse.status}`);\r\n  \r\n        const botResult = await botResponse.json();\r\n  \r\n        // Save the input and bot response to the backend\r\n        const saveMessageResponse = await fetch(`${API_BASE_URL}/save-message`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            ConvoID: localConvoId,\r\n            UserID: userId,\r\n            UserInput: userInput,\r\n            BotResponse: botResult.reply,\r\n            BotTraceInfo: '{}', // Default trace info\r\n            ConvoTitle: convoTitle,\r\n            MessageID: messageID,\r\n          }),\r\n        });\r\n  \r\n        if (!saveMessageResponse.ok) throw new Error('Failed to save message to the backend.');\r\n  \r\n        // Fetch updated messages for the session to reflect changes\r\n        const updatedMessages = await fetchMessages(localConvoId);\r\n  \r\n        // Update frontend messages state\r\n        setMessages(updatedMessages.map((msg) => ({ ...msg, text: processBotResponse(msg.text) })));\r\n  \r\n        // Ensure title is updated only once, if required\r\n        if (convoTitle === 'New Conversation') {\r\n          const response = await fetch(`${API_BASE_URL}/get-session-title/${localConvoId}`);\r\n          if (!response.ok) throw new Error(`Failed to fetch session title.`);\r\n  \r\n          const data = await response.json();\r\n  \r\n          let updatedTitle = data.ConvoTitle;\r\n          if (!updatedTitle || updatedTitle === 'New Conversation') {\r\n            updatedTitle = extractKeyWords(userInput);\r\n            await updateSessionTitle(localConvoId, updatedTitle);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error.message);\r\n        setMessages((prev) => [...prev, { user: true, text: userInput }, { user: false, text: 'Error: Unable to connect to bot.' }]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const processBotResponse = (text) => {\r\n    if (!text) return text;\r\n  \r\n    // Replace `**` wrapped text with HTML <b> tags\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<b>$1</b>');\r\n  };\r\n  \r\n  \r\n\r\n\r\n\r\n  const handleSendReport = async () => {\r\n    try {\r\n      const nzTime = new Date().toLocaleString('en-NZ', { timeZone: 'Pacific/Auckland' });\r\n      const reportData = { ...formData, type: reportType, reportedAt: nzTime };\r\n\r\n      const response = await fetch(REPORT_API_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(reportData),\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to submit report');\r\n\r\n      alert('Report submitted successfully!');\r\n      setIsModalOpen(false);\r\n      setFormData({ username: '', email: '', content: '' });\r\n    } catch (error) {\r\n      console.error('Error submitting report:', error.message);\r\n      alert('Error submitting the report');\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = (type) => {\r\n    setReportType(type);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Sidebar */}\r\n      <div className={`sidebar ${isGuest ? '' : ''}`}>\r\n        {!isGuest ? (\r\n          <>\r\n            <h3>Chat Sessions</h3>\r\n            <button onClick={handleNewConversation} disabled={isGuest}>\r\n              New Conversation\r\n            </button>\r\n            <ul>\r\n              {sessions.length > 0 ? (\r\n                // Remove duplicate sessions by convoID\r\n                [...new Map(sessions.map((session) => [session.convoID, session])).values()].map((session) => (\r\n                  <li\r\n                    key={session.convoID} // Use convoID as a unique key\r\n                    className={session.convoID === convoId ? 'active' : ''}\r\n                    onClick={() => handleSelectSession(session.convoID)}\r\n                  >\r\n                    {session.convoTitle || 'New Conversation'}\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <li>Type to create new conversation</li>\r\n              )}\r\n            </ul>\r\n            <div className=\"sidebar-footer\">&copy; 2025 My Chatbot</div>\r\n          </>\r\n        ) : (\r\n          <div className=\"guest-message\">\r\n            <p>Please log in or sign up to save your messages.</p>\r\n            <button onClick={() => window.location.href = '/login'} className=\"login-button\">\r\n              Login\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n\r\n\r\n  \r\n      {/* Chatbot Container */}\r\n      <div className=\"chatbot-container\">\r\n            <div className=\"header-controls\">\r\n        {/* Dropdown Menu for Model Selection */}\r\n        <div className=\"dropdown-container\">\r\n          <label htmlFor=\"model-selector\" className=\"dropdown-label\">\r\n            Select Model:\r\n          </label>\r\n          <select\r\n            id=\"model-selector\"\r\n            value={selectedEndpoint}\r\n            onChange={(e) => setSelectedEndpoint(e.target.value)}\r\n            className=\"dropdown\"\r\n          >\r\n            {Object.keys(endpointOptions).map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Report Button */}\r\n        <button\r\n          className=\"report-button\"\r\n          onClick={() => handleOpenModal('Chatbot Issue')}\r\n        >\r\n          🏳️ Report\r\n        </button>\r\n      </div>\r\n\r\n\r\n  \r\n        {/* Chatbot Box */}\r\n        <div className=\"chatbot-box\">\r\n            {messages.length > 0 ? (\r\n              messages.map((msg, index) => (\r\n                <div key={index} className={`message-row ${msg.user ? 'user-message' : 'bot-message'}`}>\r\n                  {!msg.user && (\r\n                    <>\r\n                      <img\r\n                        src=\"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\"\r\n                        alt=\"Bot\"\r\n                        className=\"bot-logo\"\r\n                      />\r\n                      <div className=\"message-bubble\"\r\n                      dangerouslySetInnerHTML={{ __html: msg.text }} // Render HTML for bold text\r\n                      ></div>\r\n                    </>\r\n                  )}\r\n                  {msg.user && (\r\n                    <>\r\n                      <div className=\"message-bubble\">{msg.text}</div>\r\n                      <img\r\n                        src=\"https://img.icons8.com/ios-filled/50/0078d4/user-male-circle.png\"\r\n                        alt=\"User\"\r\n                        className=\"user-logo\"\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-messages\"></div>\r\n            )}\r\n  \r\n          {/* Loading Indicator */}\r\n          {isLoading && (\r\n            <div className=\"message-row bot-message\">\r\n              <img\r\n                src=\"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\"\r\n                alt=\"Bot\"\r\n                className=\"bot-logo\"\r\n              />\r\n              <div className=\"message-bubble\">Bot is typing...</div>\r\n            </div>\r\n          )}\r\n  \r\n          {/* Auto-Scroll Ref */}\r\n          <div ref={chatEndRef} />\r\n        </div>\r\n      </div>\r\n  \r\n        {/* Input Section */}\r\n        <div className=\"chatbot-input\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === 'Enter' && handleSend()} // Trigger send on Enter key press\r\n          />\r\n          <button onClick={handleSend}>Send</button>\r\n        </div>\r\n  \r\n      {/* Modal */}\r\n      {isModalOpen && (\r\n          <div className=\"modal-overlay\">\r\n              <div className=\"modal-content\">\r\n                  <h2>{reportType} Report</h2>\r\n                  \r\n                  {/* Form Fields */}\r\n                  <label>Username</label>\r\n                  <input\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      value={formData.username}\r\n                      onChange={handleInputChange}\r\n                  />\r\n                  <label>Email</label>\r\n                  <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      value={formData.email}\r\n                      onChange={handleInputChange}\r\n                  />\r\n                  <label>Description</label>\r\n                  <textarea\r\n                      name=\"content\"\r\n                      rows=\"4\"\r\n                      value={formData.content}\r\n                      onChange={handleInputChange}\r\n                  />\r\n                  \r\n                  {/* Toggle Link */}\r\n                  <p style={{ marginTop: '10px', fontSize: '0.9rem', color: '#0078d4', cursor: 'pointer' }}>\r\n                      {reportType === 'Chatbot Issue' ? (\r\n                          <span onClick={() => {\r\n                              setReportType('Website Issue');\r\n                              setFormData({ username: '', email: '', content: '' }); // Reset form\r\n                          }}>\r\n                              Is there a website problem? Report it here\r\n                          </span>\r\n                      ) : (\r\n                          <span onClick={() => {\r\n                              setReportType('Chatbot Issue');\r\n                              setFormData({ username: '', email: '', content: '' }); // Reset form\r\n                          }}>\r\n                              Go back to Chatbot Issue form\r\n                          </span>\r\n                      )}\r\n                  </p>\r\n\r\n                  {/* Action Buttons */}\r\n                  <button className=\"modal-submit\" onClick={handleSendReport}>\r\n                      Submit\r\n                  </button>\r\n                  <button className=\"modal-close\" onClick={() => setIsModalOpen(false)}>\r\n                      Close\r\n                  </button>\r\n              </div>\r\n          </div>\r\n      )}\r\n\r\n    </>\r\n  );\r\n  \r\n  \r\n  \r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}