{"ast":null,"code":"import _objectSpread from\"C:/Users/echa328/Downloads/unleashai-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useRef}from'react';import'./Chatbot.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";async function getUserId(username){if(!username)return null;// Skip if no username\nconst API_BASE_URL=process.env.REACT_APP_API_BASE_URL;try{const response=await fetch(\"\".concat(API_BASE_URL,\"/api/users/get-user-id?username=\").concat(encodeURIComponent(username)),{method:'GET',headers:{'Content-Type':'application/json'}});if(response.ok){const data=await response.json();localStorage.setItem('user_id',data.UserId);// Cache userId locally\nreturn data.UserId;}else{console.error('Error fetching user ID:',response.status);return null;}}catch(error){console.error('Error retrieving user ID:',error);return null;}}function Chatbot(){const[messages,setMessages]=useState([]);const[userInput,setUserInput]=useState('');const[isModalOpen,setIsModalOpen]=useState(false);const[reportType,setReportType]=useState('');const[formData,setFormData]=useState({username:'',email:'',content:''});const[userId,setUserId]=useState(null);const chatEndRef=useRef(null);const[convoId,setConvoId]=useState(null);const[isGuest,setIsGuest]=useState(false);const[isLoading,setIsLoading]=useState(false);const[sessions,setSessions]=useState([]);const[isTitleUpdated,setIsTitleUpdated]=useState(false);// Track if title is updated\nconst[convoTitle,setConvoTitle]=useState(\"\");// State to track ConvoTitle\nconst[selectedEndpoint,setSelectedEndpoint]=useState('Default Model');// State for selected endpoint\nconst API_BASE_URL=process.env.REACT_APP_API_BASE_URL;// Map endpoint options\nconst endpointOptions={'Default Model':\"\".concat(API_BASE_URL,\"/api/bedrock/chat\"),'Advanced Model':\"\".concat(API_BASE_URL,\"/api/bedrock/invoke-flow\")};// Dynamically update BACKEND_API_URL_FLOW based on selection\nconst BACKEND_API_URL_FLOW=endpointOptions[selectedEndpoint]||endpointOptions['Default Model'];const BACKEND_API_URL=\"\".concat(API_BASE_URL,\"/api/bedrock/chat\");const REPORT_API_URL=\"\".concat(API_BASE_URL,\"/api/report\");const API_BASE_URL_2=\"\".concat(API_BASE_URL,\"/api/conversation-history\");useEffect(()=>{console.log('Sessions:',sessions);},[sessions]);useEffect(()=>{console.log('Messages retrieved for page/session:',messages);},[messages]);useEffect(()=>{if(messages.length>0){var _chatEndRef$current;(_chatEndRef$current=chatEndRef.current)===null||_chatEndRef$current===void 0?void 0:_chatEndRef$current.scrollIntoView({behavior:'smooth'});}},[messages]);// On component mount, determine if user is logged in\nuseEffect(()=>{const fetchUser=async()=>{const storedUserId=localStorage.getItem(\"user_id\");const username=localStorage.getItem(\"username\");if(storedUserId){setUserId(storedUserId);setIsGuest(false);}else if(username){const fetchedUserId=await getUserId(username);if(fetchedUserId){setUserId(fetchedUserId);setIsGuest(false);}else{console.error(\"Failed to fetch userId for the logged-in user.\");}}else{setIsGuest(true);}};fetchUser();},[]);useEffect(()=>{// This effect will run when the component mounts and when userId is available\nif(userId){fetchSessions();// Fetch sessions when the component is first loaded\n}},[userId]);// This will trigger only when userId changes\n// Fetch all sessions for the logged-in user\n// Fetch sessions and their titles\n// Fetch sessions and their titles\nconst fetchSessions=async()=>{if(!userId||isGuest)return;try{const response=await fetch(\"\".concat(API_BASE_URL_2,\"/sessions/\").concat(userId),{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(response.ok){const data=await response.json();console.log(\"Fetched sessions:\",data);// Add logging to debug the response\nsetSessions(data);// Update the sessions state with the latest data\n}else{console.error(\"Failed to fetch sessions:\",response.status);}}catch(error){console.error(\"Error fetching sessions:\",error);}};// Fetch messages for a specific session\nconst fetchMessages=async sessionId=>{if(!sessionId){console.error(\"Session ID is undefined.\");return[];}try{const response=await fetch(\"\".concat(API_BASE_URL_2,\"/messages/\").concat(sessionId,\"/\").concat(userId),{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(response.ok){const data=await response.json();if(!Array.isArray(data)||data.length===0){console.error(\"Invalid data structure or empty response:\",data);return[];}return data.flatMap(message=>[message.userInput?{user:true,text:message.userInput}:null,message.botResponse?{user:false,text:message.botResponse}:null]).filter(Boolean);// Remove null values\n}else{console.error(\"Failed to fetch messages:\",response.status);return[];}}catch(error){console.error(\"Error fetching messages:\",error);return[];}};const handleSelectSession=async sessionId=>{console.log(\"Selected Session ID:\",sessionId);console.log(\"User ID:\",userId);if(!sessionId||!userId){console.error(\"Session ID or User ID is missing.\");return;}try{setConvoId(sessionId);const retrievedMessages=await fetchMessages(sessionId);console.log(\"Retrieved Messages:\",retrievedMessages);setMessages(retrievedMessages);}catch(error){console.error(\"Error selecting session:\",error);}};// Handle manual creation of new conversation\nconst handleNewConversation=async()=>{if(isGuest){console.warn(\"Guests cannot create new conversations.\");return;}// Reset the current session and messages\nsetConvoId(null);// Clear current session ID\nsetMessages([]);// Clear the messages\nconsole.log(\"Session cleared. Waiting for first user input to auto-create session.\");};// Update\nconst updateSessionTitle=async(convoId,convoTitle)=>{try{const response=await fetch(\"\".concat(API_BASE_URL_2,\"/update-title\"),{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({ConvoID:convoId,ConvoTitle:convoTitle})});if(response.ok){console.log(\"Session title updated to: \".concat(convoTitle));// After updating the title, directly re-fetch the sessions to get the latest data\nfetchSessions();// Re-fetch sessions to reflect the updated title\n}else{console.error(\"Failed to update session title.\");}}catch(error){console.error(\"Error updating session title:\",error);}};const createNewSession=async function(userId,setSessions,setConvoId){let convoTitle=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"New Conversation\";try{const response=await fetch(\"\".concat(API_BASE_URL_2,\"/create\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({UserID:userId,ConvoTitle:convoTitle})});if(response.ok){const result=await response.json();// Check if the session is already in the list before adding\nsetSessions(prevSessions=>{const exists=prevSessions.some(session=>session.convoID===result.convoID);if(exists)return prevSessions;// Do not add duplicates\nreturn[...prevSessions,{convoID:result.convoID,convoTitle}];});setConvoId(result.convoID);console.log(\"New session created with convoID: \".concat(result.convoID,\" and title: \").concat(convoTitle));return result.convoID;// Return the convoID for further use\n}else{console.error(\"Failed to create a session.\");return null;}}catch(error){console.error(\"Error creating session:\",error);return null;}};const extractKeyWords=message=>{if(!message)return\"New Conversation\";const words=message.split(\" \").slice(0,3).join(\" \");return words||\"New Conversation\";};const generateMessageID=()=>{return'xxxxxxxxxxxxxxxx'.replace(/[x]/g,function(){return(Math.random()*16|0).toString(16);});};const handleSend=async()=>{if(userInput.trim()){// Handle Guest User\nif(isGuest){setUserInput('');setMessages(prev=>[...prev,{user:true,text:userInput}]);// Add user's input immediately\nsetIsLoading(true);try{const response=await fetch(BACKEND_API_URL_FLOW,{// change here to switch agent and flow\nmethod:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:userInput})});if(!response.ok)throw new Error(\"HTTP error! status: \".concat(response.status));const result=await response.json();const botMessage={user:false,text:processBotResponse(result.reply)};setMessages(prev=>[...prev,botMessage]);// Add bot response to messages\n}catch(error){console.error('Error:',error.message);setMessages(prev=>[...prev,{user:true,text:userInput},{user:false,text:'Error: Unable to connect to bot.'}]);}finally{setIsLoading(false);}return;}setUserInput('');setMessages(prev=>[...prev,{user:true,text:userInput}]);// Add user's input immediately\nsetIsLoading(true);try{let localConvoId=convoId;// If there's no convoId, create a new session\nif(!localConvoId){const convoTitle=extractKeyWords(userInput);// Generate title from user input\nlocalConvoId=await createNewSession(userId,setSessions,setConvoId,convoTitle);if(!localConvoId){console.error('Failed to create a new session.');return;}}// Generate MessageID\nconst messageID=generateMessageID();// Save the user input and fetch bot response\nconst botResponse=await fetch(BACKEND_API_URL_FLOW,{// change here to switch agent and flow\nmethod:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message:userInput,userId})});if(!botResponse.ok)throw new Error(\"HTTP error! status: \".concat(botResponse.status));const botResult=await botResponse.json();// Save the input and bot response to the backend\nconst saveMessageResponse=await fetch(\"\".concat(API_BASE_URL_2,\"/save-message\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({ConvoID:localConvoId,UserID:userId,UserInput:userInput,BotResponse:botResult.reply,BotTraceInfo:'{}',// Default trace info\nConvoTitle:convoTitle,MessageID:messageID})});if(!saveMessageResponse.ok)throw new Error('Failed to save message to the backend.');// Fetch updated messages for the session to reflect changes\nconst updatedMessages=await fetchMessages(localConvoId);// Update frontend messages state\nsetMessages(updatedMessages.map(msg=>_objectSpread(_objectSpread({},msg),{},{text:processBotResponse(msg.text)})));// Ensure title is updated only once, if required\nif(convoTitle==='New Conversation'){const response=await fetch(\"\".concat(API_BASE_URL_2,\"/get-session-title/\").concat(localConvoId));if(!response.ok)throw new Error(\"Failed to fetch session title.\");const data=await response.json();let updatedTitle=data.ConvoTitle;if(!updatedTitle||updatedTitle==='New Conversation'){updatedTitle=extractKeyWords(userInput);await updateSessionTitle(localConvoId,updatedTitle);}}}catch(error){console.error('Error:',error.message);setMessages(prev=>[...prev,{user:true,text:userInput},{user:false,text:'Error: Unable to connect to bot.'}]);}finally{setIsLoading(false);}}};const processBotResponse=text=>{if(!text)return text;// Replace `**` wrapped text with HTML <b> tags\nreturn text.replace(/\\*\\*(.*?)\\*\\*/g,'<b>$1</b>');};const handleSendReport=async()=>{try{const nzTime=new Date().toLocaleString('en-NZ',{timeZone:'Pacific/Auckland'});const reportData=_objectSpread(_objectSpread({},formData),{},{type:reportType,reportedAt:nzTime});const response=await fetch(REPORT_API_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(reportData)});if(!response.ok)throw new Error('Failed to submit report');alert('Report submitted successfully!');setIsModalOpen(false);setFormData({username:'',email:'',content:''});}catch(error){console.error('Error submitting report:',error.message);alert('Error submitting the report');}};const handleOpenModal=type=>{setReportType(type);setIsModalOpen(true);};const handleInputChange=e=>{const{name,value}=e.target;setFormData(prev=>_objectSpread(_objectSpread({},prev),{},{[name]:value}));};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"sidebar \".concat(isGuest?'':''),children:!isGuest?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Chat Sessions\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleNewConversation,disabled:isGuest,children:\"New Conversation\"}),/*#__PURE__*/_jsx(\"ul\",{children:sessions.length>0?// Remove duplicate sessions by convoID\n[...new Map(sessions.map(session=>[session.convoID,session])).values()].map(session=>/*#__PURE__*/_jsx(\"li\",{// Use convoID as a unique key\nclassName:session.convoID===convoId?'active':'',onClick:()=>handleSelectSession(session.convoID),children:session.convoTitle||'New Conversation'},session.convoID)):/*#__PURE__*/_jsx(\"li\",{children:\"Type to create new conversation\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"sidebar-footer\",children:\"\\xA9 2025 My Chatbot\"})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"guest-message\",children:[/*#__PURE__*/_jsx(\"p\",{children:\"Please log in or sign up to save your messages.\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.href='/login',className:\"login-button\",children:\"Login\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"dropdown-container\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"model-selector\",className:\"dropdown-label\",children:\"Select Model:\"}),/*#__PURE__*/_jsx(\"select\",{id:\"model-selector\",value:selectedEndpoint,onChange:e=>setSelectedEndpoint(e.target.value),className:\"dropdown\",children:Object.keys(endpointOptions).map(option=>/*#__PURE__*/_jsx(\"option\",{value:option,children:option},option))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"report-button\",onClick:()=>handleOpenModal('Chatbot Issue'),children:\"\\uD83C\\uDFF3\\uFE0F Report\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-box\",children:[messages.length>0?messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message-row \".concat(msg.user?'user-message':'bot-message'),children:[!msg.user&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\",alt:\"Bot\",className:\"bot-logo\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-bubble\",dangerouslySetInnerHTML:{__html:msg.text}// Render HTML for bold text\n})]}),msg.user&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-bubble\",children:msg.text}),/*#__PURE__*/_jsx(\"img\",{src:\"https://img.icons8.com/ios-filled/50/0078d4/user-male-circle.png\",alt:\"User\",className:\"user-logo\"})]})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"no-messages\"}),isLoading&&/*#__PURE__*/_jsxs(\"div\",{className:\"message-row bot-message\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\",alt:\"Bot\",className:\"bot-logo\"}),/*#__PURE__*/_jsx(\"div\",{className:\"message-bubble\",children:\"Bot is typing...\"})]}),/*#__PURE__*/_jsx(\"div\",{ref:chatEndRef})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type your message...\",value:userInput,onChange:e=>setUserInput(e.target.value),onKeyDown:e=>e.key==='Enter'&&handleSend()// Trigger send on Enter key press\n}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSend,children:\"Send\"})]}),isModalOpen&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[reportType,\" Report\"]}),/*#__PURE__*/_jsx(\"label\",{children:\"Username\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",value:formData.username,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"label\",{children:\"Email\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",name:\"email\",value:formData.email,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"label\",{children:\"Description\"}),/*#__PURE__*/_jsx(\"textarea\",{name:\"content\",rows:\"4\",value:formData.content,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"p\",{style:{marginTop:'10px',fontSize:'0.9rem',color:'#0078d4',cursor:'pointer'},children:reportType==='Chatbot Issue'?/*#__PURE__*/_jsx(\"span\",{onClick:()=>{setReportType('Website Issue');setFormData({username:'',email:'',content:''});// Reset form\n},children:\"Is there a website problem? Report it here\"}):/*#__PURE__*/_jsx(\"span\",{onClick:()=>{setReportType('Chatbot Issue');setFormData({username:'',email:'',content:''});// Reset form\n},children:\"Go back to Chatbot Issue form\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"modal-submit\",onClick:handleSendReport,children:\"Submit\"}),/*#__PURE__*/_jsx(\"button\",{className:\"modal-close\",onClick:()=>setIsModalOpen(false),children:\"Close\"})]})})]});}export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","getUserId","username","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","response","fetch","concat","encodeURIComponent","method","headers","ok","data","json","localStorage","setItem","UserId","console","error","status","Chatbot","messages","setMessages","userInput","setUserInput","isModalOpen","setIsModalOpen","reportType","setReportType","formData","setFormData","email","content","userId","setUserId","chatEndRef","convoId","setConvoId","isGuest","setIsGuest","isLoading","setIsLoading","sessions","setSessions","isTitleUpdated","setIsTitleUpdated","convoTitle","setConvoTitle","selectedEndpoint","setSelectedEndpoint","endpointOptions","BACKEND_API_URL_FLOW","BACKEND_API_URL","REPORT_API_URL","API_BASE_URL_2","log","length","_chatEndRef$current","current","scrollIntoView","behavior","fetchUser","storedUserId","getItem","fetchedUserId","fetchSessions","fetchMessages","sessionId","Array","isArray","flatMap","message","user","text","botResponse","filter","Boolean","handleSelectSession","retrievedMessages","handleNewConversation","warn","updateSessionTitle","body","JSON","stringify","ConvoID","ConvoTitle","createNewSession","arguments","undefined","UserID","result","prevSessions","exists","some","session","convoID","extractKeyWords","words","split","slice","join","generateMessageID","replace","Math","random","toString","handleSend","trim","prev","Error","botMessage","processBotResponse","reply","localConvoId","messageID","botResult","saveMessageResponse","UserInput","BotResponse","BotTraceInfo","MessageID","updatedMessages","map","msg","_objectSpread","updatedTitle","handleSendReport","nzTime","Date","toLocaleString","timeZone","reportData","type","reportedAt","alert","handleOpenModal","handleInputChange","e","name","value","target","children","className","onClick","disabled","Map","values","window","location","href","htmlFor","id","onChange","Object","keys","option","index","src","alt","dangerouslySetInnerHTML","__html","ref","placeholder","onKeyDown","key","rows","style","marginTop","fontSize","color","cursor"],"sources":["C:/Users/echa328/Downloads/unleashai-frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\n\r\nasync function getUserId(username) {\r\n  if (!username) return null; // Skip if no username\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/api/users/get-user-id?username=${encodeURIComponent(username)}`, {\r\n      method: 'GET',\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      localStorage.setItem('user_id', data.UserId); // Cache userId locally\r\n      return data.UserId;\r\n    } else {\r\n      console.error('Error fetching user ID:', response.status);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Error retrieving user ID:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [reportType, setReportType] = useState('');\r\n  const [formData, setFormData] = useState({ username: '', email: '', content: '' });\r\n  const [userId, setUserId] = useState(null);\r\n  const chatEndRef = useRef(null);\r\n  const [convoId, setConvoId] = useState(null);\r\n  const [isGuest, setIsGuest] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [isTitleUpdated, setIsTitleUpdated] = useState(false); // Track if title is updated\r\n  const [convoTitle, setConvoTitle] = useState(\"\"); // State to track ConvoTitle\r\n  const [selectedEndpoint, setSelectedEndpoint] = useState('Default Model'); // State for selected endpoint\r\n\r\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL\r\n\r\n  // Map endpoint options\r\n  const endpointOptions = {\r\n    'Default Model': `${API_BASE_URL}/api/bedrock/chat`,\r\n    'Advanced Model': `${API_BASE_URL}/api/bedrock/invoke-flow`,\r\n  };\r\n\r\n  // Dynamically update BACKEND_API_URL_FLOW based on selection\r\n  const BACKEND_API_URL_FLOW = endpointOptions[selectedEndpoint] || endpointOptions['Default Model'];\r\n\r\n  const BACKEND_API_URL = `${API_BASE_URL}/api/bedrock/chat`;\r\n  const REPORT_API_URL = `${API_BASE_URL}/api/report`;\r\n  const API_BASE_URL_2 = `${API_BASE_URL}/api/conversation-history`;\r\n\r\n\r\n  useEffect(() => {\r\n    console.log('Sessions:', sessions);\r\n  }, [sessions]);\r\n  \r\n  useEffect(() => {\r\n    console.log('Messages retrieved for page/session:', messages);\r\n  }, [messages]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (messages.length > 0) {\r\n      chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  // On component mount, determine if user is logged in\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      const storedUserId = localStorage.getItem(\"user_id\");\r\n      const username = localStorage.getItem(\"username\");\r\n\r\n      if (storedUserId) {\r\n        setUserId(storedUserId);\r\n        setIsGuest(false);\r\n      } else if (username) {\r\n        const fetchedUserId = await getUserId(username);\r\n        if (fetchedUserId) {\r\n          setUserId(fetchedUserId);\r\n          setIsGuest(false);\r\n        } else {\r\n          console.error(\"Failed to fetch userId for the logged-in user.\");\r\n        }\r\n      } else {\r\n        setIsGuest(true);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // This effect will run when the component mounts and when userId is available\r\n    if (userId) {\r\n      fetchSessions(); // Fetch sessions when the component is first loaded\r\n    }\r\n  }, [userId]);  // This will trigger only when userId changes\r\n  \r\n  \r\n\r\n  // Fetch all sessions for the logged-in user\r\n  // Fetch sessions and their titles\r\n  // Fetch sessions and their titles\r\nconst fetchSessions = async () => {\r\n  if (!userId || isGuest) return;\r\n\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL_2}/sessions/${userId}`, {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      console.log(\"Fetched sessions:\", data);  // Add logging to debug the response\r\n      setSessions(data); // Update the sessions state with the latest data\r\n    } else {\r\n      console.error(\"Failed to fetch sessions:\", response.status);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching sessions:\", error);\r\n  }\r\n};\r\n\r\n  \r\n\r\n  \r\n\r\n\r\n  \r\n  \r\n\r\n  // Fetch messages for a specific session\r\n  const fetchMessages = async (sessionId) => {\r\n    if (!sessionId) {\r\n      console.error(\"Session ID is undefined.\");\r\n      return [];\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(`${API_BASE_URL_2}/messages/${sessionId}/${userId}`, {\r\n        method: \"GET\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const data = await response.json();\r\n  \r\n        if (!Array.isArray(data) || data.length === 0) {\r\n          console.error(\"Invalid data structure or empty response:\", data);\r\n          return [];\r\n        }\r\n  \r\n        return data.flatMap((message) => [\r\n          message.userInput ? { user: true, text: message.userInput } : null,\r\n          message.botResponse ? { user: false, text: message.botResponse } : null,\r\n        ]).filter(Boolean); // Remove null values\r\n      } else {\r\n        console.error(\"Failed to fetch messages:\", response.status);\r\n        return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n      return [];\r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n  const handleSelectSession = async (sessionId) => {\r\n    console.log(\"Selected Session ID:\", sessionId);\r\n    console.log(\"User ID:\", userId);\r\n  \r\n    if (!sessionId || !userId) {\r\n      console.error(\"Session ID or User ID is missing.\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      setConvoId(sessionId);\r\n      const retrievedMessages = await fetchMessages(sessionId);\r\n      console.log(\"Retrieved Messages:\", retrievedMessages);\r\n  \r\n      setMessages(retrievedMessages);\r\n    } catch (error) {\r\n      console.error(\"Error selecting session:\", error);\r\n    }\r\n  };\r\n  \r\n\r\n\r\n  // Handle manual creation of new conversation\r\n  const handleNewConversation = async () => {\r\n    if (isGuest) {\r\n      console.warn(\"Guests cannot create new conversations.\");\r\n      return;\r\n    }\r\n  \r\n    // Reset the current session and messages\r\n    setConvoId(null); // Clear current session ID\r\n    setMessages([]);  // Clear the messages\r\n  \r\n    console.log(\"Session cleared. Waiting for first user input to auto-create session.\");\r\n  };\r\n\r\n\r\n  // Update\r\n  const updateSessionTitle = async (convoId, convoTitle) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL_2}/update-title`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ ConvoID: convoId, ConvoTitle: convoTitle }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        console.log(`Session title updated to: ${convoTitle}`);\r\n  \r\n        // After updating the title, directly re-fetch the sessions to get the latest data\r\n        fetchSessions(); // Re-fetch sessions to reflect the updated title\r\n      } else {\r\n        console.error(\"Failed to update session title.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating session title:\", error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n\r\n  const createNewSession = async (userId, setSessions, setConvoId, convoTitle = \"New Conversation\") => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL_2}/create`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ UserID: userId, ConvoTitle: convoTitle }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        const result = await response.json();\r\n  \r\n        // Check if the session is already in the list before adding\r\n        setSessions((prevSessions) => {\r\n          const exists = prevSessions.some((session) => session.convoID === result.convoID);\r\n          if (exists) return prevSessions; // Do not add duplicates\r\n          return [...prevSessions, { convoID: result.convoID, convoTitle }];\r\n        });\r\n  \r\n        setConvoId(result.convoID);\r\n        console.log(`New session created with convoID: ${result.convoID} and title: ${convoTitle}`);\r\n        return result.convoID; // Return the convoID for further use\r\n      } else {\r\n        console.error(\"Failed to create a session.\");\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating session:\", error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n\r\n  \r\n  const extractKeyWords = (message) => {\r\n    if (!message) return \"New Conversation\";\r\n    const words = message.split(\" \").slice(0, 3).join(\" \");\r\n    return words || \"New Conversation\";\r\n  };\r\n\r\n  const generateMessageID = () => {\r\n    return 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, function () {\r\n      return (Math.random() * 16 | 0).toString(16);\r\n    });\r\n  };\r\n  \r\n\r\n\r\n  const handleSend = async () => {\r\n    if (userInput.trim()) {\r\n      // Handle Guest User\r\n      if (isGuest) {\r\n        setUserInput('');\r\n        setMessages((prev) => [...prev, { user: true, text: userInput }]); // Add user's input immediately\r\n        setIsLoading(true);\r\n  \r\n        try {\r\n          const response = await fetch(BACKEND_API_URL_FLOW, {   // change here to switch agent and flow\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ message: userInput }),\r\n          });\r\n  \r\n          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n  \r\n          const result = await response.json();\r\n          const botMessage = { user: false, text: processBotResponse(result.reply) };\r\n          setMessages((prev) => [...prev, botMessage]); // Add bot response to messages\r\n        } catch (error) {\r\n          console.error('Error:', error.message);\r\n          setMessages((prev) => [...prev, { user: true, text: userInput }, { user: false, text: 'Error: Unable to connect to bot.' }]);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n        return;\r\n      }\r\n  \r\n      setUserInput('');\r\n      setMessages((prev) => [...prev, { user: true, text: userInput }]); // Add user's input immediately\r\n      setIsLoading(true);\r\n  \r\n      try {\r\n        let localConvoId = convoId;\r\n  \r\n        // If there's no convoId, create a new session\r\n        if (!localConvoId) {\r\n          const convoTitle = extractKeyWords(userInput); // Generate title from user input\r\n          localConvoId = await createNewSession(userId, setSessions, setConvoId, convoTitle);\r\n  \r\n          if (!localConvoId) {\r\n            console.error('Failed to create a new session.');\r\n            return;\r\n          }\r\n        }\r\n  \r\n        // Generate MessageID\r\n        const messageID = generateMessageID();\r\n  \r\n        // Save the user input and fetch bot response\r\n        const botResponse = await fetch(BACKEND_API_URL_FLOW, {  // change here to switch agent and flow\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ message: userInput, userId }),\r\n        });\r\n  \r\n        if (!botResponse.ok) throw new Error(`HTTP error! status: ${botResponse.status}`);\r\n  \r\n        const botResult = await botResponse.json();\r\n  \r\n        // Save the input and bot response to the backend\r\n        const saveMessageResponse = await fetch(`${API_BASE_URL_2}/save-message`, {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            ConvoID: localConvoId,\r\n            UserID: userId,\r\n            UserInput: userInput,\r\n            BotResponse: botResult.reply,\r\n            BotTraceInfo: '{}', // Default trace info\r\n            ConvoTitle: convoTitle,\r\n            MessageID: messageID,\r\n          }),\r\n        });\r\n  \r\n        if (!saveMessageResponse.ok) throw new Error('Failed to save message to the backend.');\r\n  \r\n        // Fetch updated messages for the session to reflect changes\r\n        const updatedMessages = await fetchMessages(localConvoId);\r\n  \r\n        // Update frontend messages state\r\n        setMessages(updatedMessages.map((msg) => ({ ...msg, text: processBotResponse(msg.text) })));\r\n  \r\n        // Ensure title is updated only once, if required\r\n        if (convoTitle === 'New Conversation') {\r\n          const response = await fetch(`${API_BASE_URL_2}/get-session-title/${localConvoId}`);\r\n          if (!response.ok) throw new Error(`Failed to fetch session title.`);\r\n  \r\n          const data = await response.json();\r\n  \r\n          let updatedTitle = data.ConvoTitle;\r\n          if (!updatedTitle || updatedTitle === 'New Conversation') {\r\n            updatedTitle = extractKeyWords(userInput);\r\n            await updateSessionTitle(localConvoId, updatedTitle);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error.message);\r\n        setMessages((prev) => [...prev, { user: true, text: userInput }, { user: false, text: 'Error: Unable to connect to bot.' }]);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const processBotResponse = (text) => {\r\n    if (!text) return text;\r\n  \r\n    // Replace `**` wrapped text with HTML <b> tags\r\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<b>$1</b>');\r\n  };\r\n  \r\n  \r\n\r\n\r\n\r\n  const handleSendReport = async () => {\r\n    try {\r\n      const nzTime = new Date().toLocaleString('en-NZ', { timeZone: 'Pacific/Auckland' });\r\n      const reportData = { ...formData, type: reportType, reportedAt: nzTime };\r\n\r\n      const response = await fetch(REPORT_API_URL, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(reportData),\r\n      });\r\n\r\n      if (!response.ok) throw new Error('Failed to submit report');\r\n\r\n      alert('Report submitted successfully!');\r\n      setIsModalOpen(false);\r\n      setFormData({ username: '', email: '', content: '' });\r\n    } catch (error) {\r\n      console.error('Error submitting report:', error.message);\r\n      alert('Error submitting the report');\r\n    }\r\n  };\r\n\r\n  const handleOpenModal = (type) => {\r\n    setReportType(type);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Sidebar */}\r\n      <div className={`sidebar ${isGuest ? '' : ''}`}>\r\n        {!isGuest ? (\r\n          <>\r\n            <h3>Chat Sessions</h3>\r\n            <button onClick={handleNewConversation} disabled={isGuest}>\r\n              New Conversation\r\n            </button>\r\n            <ul>\r\n              {sessions.length > 0 ? (\r\n                // Remove duplicate sessions by convoID\r\n                [...new Map(sessions.map((session) => [session.convoID, session])).values()].map((session) => (\r\n                  <li\r\n                    key={session.convoID} // Use convoID as a unique key\r\n                    className={session.convoID === convoId ? 'active' : ''}\r\n                    onClick={() => handleSelectSession(session.convoID)}\r\n                  >\r\n                    {session.convoTitle || 'New Conversation'}\r\n                  </li>\r\n                ))\r\n              ) : (\r\n                <li>Type to create new conversation</li>\r\n              )}\r\n            </ul>\r\n            <div className=\"sidebar-footer\">&copy; 2025 My Chatbot</div>\r\n          </>\r\n        ) : (\r\n          <div className=\"guest-message\">\r\n            <p>Please log in or sign up to save your messages.</p>\r\n            <button onClick={() => window.location.href = '/login'} className=\"login-button\">\r\n              Login\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n\r\n\r\n  \r\n      {/* Chatbot Container */}\r\n      <div className=\"chatbot-container\">\r\n            <div className=\"header-controls\">\r\n        {/* Dropdown Menu for Model Selection */}\r\n        <div className=\"dropdown-container\">\r\n          <label htmlFor=\"model-selector\" className=\"dropdown-label\">\r\n            Select Model:\r\n          </label>\r\n          <select\r\n            id=\"model-selector\"\r\n            value={selectedEndpoint}\r\n            onChange={(e) => setSelectedEndpoint(e.target.value)}\r\n            className=\"dropdown\"\r\n          >\r\n            {Object.keys(endpointOptions).map((option) => (\r\n              <option key={option} value={option}>\r\n                {option}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {/* Report Button */}\r\n        <button\r\n          className=\"report-button\"\r\n          onClick={() => handleOpenModal('Chatbot Issue')}\r\n        >\r\n          🏳️ Report\r\n        </button>\r\n      </div>\r\n\r\n\r\n  \r\n        {/* Chatbot Box */}\r\n        <div className=\"chatbot-box\">\r\n            {messages.length > 0 ? (\r\n              messages.map((msg, index) => (\r\n                <div key={index} className={`message-row ${msg.user ? 'user-message' : 'bot-message'}`}>\r\n                  {!msg.user && (\r\n                    <>\r\n                      <img\r\n                        src=\"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\"\r\n                        alt=\"Bot\"\r\n                        className=\"bot-logo\"\r\n                      />\r\n                      <div className=\"message-bubble\"\r\n                      dangerouslySetInnerHTML={{ __html: msg.text }} // Render HTML for bold text\r\n                      ></div>\r\n                    </>\r\n                  )}\r\n                  {msg.user && (\r\n                    <>\r\n                      <div className=\"message-bubble\">{msg.text}</div>\r\n                      <img\r\n                        src=\"https://img.icons8.com/ios-filled/50/0078d4/user-male-circle.png\"\r\n                        alt=\"User\"\r\n                        className=\"user-logo\"\r\n                      />\r\n                    </>\r\n                  )}\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div className=\"no-messages\"></div>\r\n            )}\r\n  \r\n          {/* Loading Indicator */}\r\n          {isLoading && (\r\n            <div className=\"message-row bot-message\">\r\n              <img\r\n                src=\"https://img.icons8.com/ios-filled/50/00bfa6/bot.png\"\r\n                alt=\"Bot\"\r\n                className=\"bot-logo\"\r\n              />\r\n              <div className=\"message-bubble\">Bot is typing...</div>\r\n            </div>\r\n          )}\r\n  \r\n          {/* Auto-Scroll Ref */}\r\n          <div ref={chatEndRef} />\r\n        </div>\r\n      </div>\r\n  \r\n        {/* Input Section */}\r\n        <div className=\"chatbot-input\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Type your message...\"\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n            onKeyDown={(e) => e.key === 'Enter' && handleSend()} // Trigger send on Enter key press\r\n          />\r\n          <button onClick={handleSend}>Send</button>\r\n        </div>\r\n  \r\n      {/* Modal */}\r\n      {isModalOpen && (\r\n          <div className=\"modal-overlay\">\r\n              <div className=\"modal-content\">\r\n                  <h2>{reportType} Report</h2>\r\n                  \r\n                  {/* Form Fields */}\r\n                  <label>Username</label>\r\n                  <input\r\n                      type=\"text\"\r\n                      name=\"username\"\r\n                      value={formData.username}\r\n                      onChange={handleInputChange}\r\n                  />\r\n                  <label>Email</label>\r\n                  <input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      value={formData.email}\r\n                      onChange={handleInputChange}\r\n                  />\r\n                  <label>Description</label>\r\n                  <textarea\r\n                      name=\"content\"\r\n                      rows=\"4\"\r\n                      value={formData.content}\r\n                      onChange={handleInputChange}\r\n                  />\r\n                  \r\n                  {/* Toggle Link */}\r\n                  <p style={{ marginTop: '10px', fontSize: '0.9rem', color: '#0078d4', cursor: 'pointer' }}>\r\n                      {reportType === 'Chatbot Issue' ? (\r\n                          <span onClick={() => {\r\n                              setReportType('Website Issue');\r\n                              setFormData({ username: '', email: '', content: '' }); // Reset form\r\n                          }}>\r\n                              Is there a website problem? Report it here\r\n                          </span>\r\n                      ) : (\r\n                          <span onClick={() => {\r\n                              setReportType('Chatbot Issue');\r\n                              setFormData({ username: '', email: '', content: '' }); // Reset form\r\n                          }}>\r\n                              Go back to Chatbot Issue form\r\n                          </span>\r\n                      )}\r\n                  </p>\r\n\r\n                  {/* Action Buttons */}\r\n                  <button className=\"modal-submit\" onClick={handleSendReport}>\r\n                      Submit\r\n                  </button>\r\n                  <button className=\"modal-close\" onClick={() => setIsModalOpen(false)}>\r\n                      Close\r\n                  </button>\r\n              </div>\r\n          </div>\r\n      )}\r\n\r\n    </>\r\n  );\r\n  \r\n  \r\n  \r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}